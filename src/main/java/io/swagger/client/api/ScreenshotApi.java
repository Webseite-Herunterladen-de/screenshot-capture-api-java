/*
 * Screenshot Capture API
 * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.ErrorModel;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScreenshotApi {
    private ApiClient apiClient;

    public ScreenshotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScreenshotApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for captureScreenshotAuthenticated
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param hash The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call captureScreenshotAuthenticatedCall(String token, String hash, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/capture/{token}/{hash}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()))
            .replaceAll("\\{" + "hash" + "\\}", apiClient.escapeString(hash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (fileType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileType", fileType));
        if (ttl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ttl", ttl));
        if (invalidate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("invalidate", invalidate));
        if (full != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("full", full));
        if (lazyloadScroll != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lazyload_scroll", lazyloadScroll));
        if (delay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delay", delay));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (quality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quality", quality));
        if (scale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scale", scale));
        if (x != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("x", x));
        if (y != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("y", y));
        if (redirect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("redirect", redirect));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));
        if (randomUserAgent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("random_user_agent", randomUserAgent));
        if (userAgent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_agent", userAgent));
        if (headers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("headers", headers));
        if (cookies != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cookies", cookies));
        if (css != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("css", css));
        if (js != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("js", js));
        if (wait != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("wait", wait));
        if (element != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("element", element));
        if (timezone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timezone", timezone));
        if (device != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("device", device));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("latitude", latitude));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("longitude", longitude));
        if (accuracy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accuracy", accuracy));
        if (proxy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy", proxy));
        if (adblock != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("adblock", adblock));
        if (hideCookieBanners != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide_cookie_banners", hideCookieBanners));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/pdf", "image/jpeg", "image/png", "image/webp"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call captureScreenshotAuthenticatedValidateBeforeCall(String token, String hash, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling captureScreenshotAuthenticated(Async)");
        }
        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling captureScreenshotAuthenticated(Async)");
        }
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling captureScreenshotAuthenticated(Async)");
        }
        
        com.squareup.okhttp.Call call = captureScreenshotAuthenticatedCall(token, hash, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param hash The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File captureScreenshotAuthenticated(String token, String hash, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners) throws ApiException {
        ApiResponse<File> resp = captureScreenshotAuthenticatedWithHttpInfo(token, hash, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
        return resp.getData();
    }

    /**
     * 
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param hash The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> captureScreenshotAuthenticatedWithHttpInfo(String token, String hash, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners) throws ApiException {
        com.squareup.okhttp.Call call = captureScreenshotAuthenticatedValidateBeforeCall(token, hash, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param hash The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call captureScreenshotAuthenticatedAsync(String token, String hash, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = captureScreenshotAuthenticatedValidateBeforeCall(token, hash, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for captureScreenshotUnauthenticated
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call captureScreenshotUnauthenticatedCall(String token, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/capture/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (fileType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fileType", fileType));
        if (ttl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ttl", ttl));
        if (invalidate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("invalidate", invalidate));
        if (full != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("full", full));
        if (lazyloadScroll != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lazyload_scroll", lazyloadScroll));
        if (delay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delay", delay));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (quality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quality", quality));
        if (scale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scale", scale));
        if (x != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("x", x));
        if (y != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("y", y));
        if (redirect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("redirect", redirect));
        if (language != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("language", language));
        if (randomUserAgent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("random_user_agent", randomUserAgent));
        if (userAgent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_agent", userAgent));
        if (headers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("headers", headers));
        if (cookies != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cookies", cookies));
        if (css != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("css", css));
        if (js != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("js", js));
        if (wait != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("wait", wait));
        if (element != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("element", element));
        if (timezone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timezone", timezone));
        if (device != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("device", device));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("latitude", latitude));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("longitude", longitude));
        if (accuracy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accuracy", accuracy));
        if (proxy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy", proxy));
        if (adblock != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("adblock", adblock));
        if (hideCookieBanners != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hide_cookie_banners", hideCookieBanners));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/pdf", "image/jpeg", "image/png", "image/webp"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call captureScreenshotUnauthenticatedValidateBeforeCall(String token, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling captureScreenshotUnauthenticated(Async)");
        }
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling captureScreenshotUnauthenticated(Async)");
        }
        
        com.squareup.okhttp.Call call = captureScreenshotUnauthenticatedCall(token, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File captureScreenshotUnauthenticated(String token, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners) throws ApiException {
        ApiResponse<File> resp = captureScreenshotUnauthenticatedWithHttpInfo(token, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners);
        return resp.getData();
    }

    /**
     * 
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> captureScreenshotUnauthenticatedWithHttpInfo(String token, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners) throws ApiException {
        com.squareup.okhttp.Call call = captureScreenshotUnauthenticatedValidateBeforeCall(token, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. (required)
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). (required)
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call captureScreenshotUnauthenticatedAsync(String token, String url, String fileType, Long ttl, Boolean invalidate, Boolean full, Boolean lazyloadScroll, Long delay, Long width, Long height, Long quality, BigDecimal scale, Long x, Long y, Boolean redirect, String language, Boolean randomUserAgent, String userAgent, String headers, String cookies, String css, String js, String wait, String element, String timezone, String device, BigDecimal latitude, BigDecimal longitude, BigDecimal accuracy, String proxy, Boolean adblock, Boolean hideCookieBanners, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = captureScreenshotUnauthenticatedValidateBeforeCall(token, url, fileType, ttl, invalidate, full, lazyloadScroll, delay, width, height, quality, scale, x, y, redirect, language, randomUserAgent, userAgent, headers, cookies, css, js, wait, element, timezone, device, latitude, longitude, accuracy, proxy, adblock, hideCookieBanners, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
